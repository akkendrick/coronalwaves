;+
;
; NAME: MATCH_MASKS.PRO
;
; USAGE: match_masks, features, alt_features, mask, alt_mask, $
;	keepzeros=keepzeros
; 
; PURPOSE: Associates contiguous and convex labels (generated by
;       RANKDOWN.PRO, CONTIGUOUS_MASK.PRO, respectively, and then ;
;       CREATE_FEATURES.PRO), and stores this info as strings ; in the
;       "ALT_LABEL" fields of each of the convex and ; contiguous
;       features' structures.  Each convex grouping ; (a "nation")
;       should be co-spatial with a sub-region of ; exactly one
;       contiguous grouping (a "continent"), while each ; contiguous
;       grouping might contain many convex groupings, ; and/or zeros
;       (since since a minimum size criterion might ; prevent the
;       creation of convex features where a contiguous ; feature
;       exists).
;
; ARGUMENTS:
;       MASK = (N_x,N_y) array of signed labels from convex 
;		groupings. (Pixels below threshold are zeros.)
;       ALT_MASK = (N_x,N_y) array of signed labels from 
;		contigous groupings.
;
; OPTIONAL ARGUMENTS/KEYWORDS: 
;	KEEPZEROS = set to keep 0 as a valid label in contiguous
;		features' "ALT_LABEL" fields
;
; SIDE EFFECTS/ROUTINES CALLED: 
;   	Fills in formerly null-string "alt_label" fields in each 
;	structure in the arrays of structures, FEATURES and ALT_FEATURES.
;
; HISTORY: BTW, 09 May 2005
;          BTW, 02 May 2008: Modified documentation, for CONTIGUOUS_MASK
;
;- 

pro match_masks, features, alt_features, mask, alt_mask, keepzeros=keepzeros

n_features = n_elements(features.label)
n_alt = n_elements(alt_features.label)

; First, find each convex label's "parent" contiguous label.
;=============================================================
for i = 0,n_features-1 do begin

	i_addresses = where(abs(mask) eq features(i).label)

	i_alt_labels = alt_mask(i_addresses)
	i_alt_labels = i_alt_labels(uniq(i_alt_labels,sort(i_alt_labels)))

	; Ea. convex should have exactly 1 contiguous overlap.
	case 1 of  
	    (n_elements(i_alt_labels) eq 0): begin
		print,'% MATCH_MASKS: No contiguous overlaps for a convex.' 
		print,fail_variable0	
	    end 

	    (n_elements(i_alt_labels) eq 1): $
		features(i).alt_label = string(i_alt_labels)

	    (n_elements(i_alt_labels) gt 1): begin
		print,'% MATCH_MASKS: Multiple contiguous overlaps for a convex.' 
		print,fail_variable1	
	    end 

	endcase	

endfor

; Next, find all the convex labels that underlie each contiguous feature.
;=========================================================================
for i = 0,n_alt-1 do begin
	
	i_alt_addresses = where(abs(mask) eq features(i).label)

	i_labels = mask(i_alt_addresses)
	i_labels = i_labels(uniq(i_labels,sort(i_labels)))

	; A contiguous might overlap zeros, from convexes' size min. 
	i_nonz = where(i_labels ne 0, n_inonz)

	if (n_inonz eq 0) then begin
		print,'% MATCH_MASKS: No convex overlaps for a contiguous.' 
		print,alt_fail_variable0	
	endif else begin
		if not(keyword_set(keepzeros)) then i_labels = i_labels(i_nonz)
		i_labels_str = strjoin(string(i_labels))
		alt_features(i).alt_label = string(i_labels_str)
	endelse

endfor


end


